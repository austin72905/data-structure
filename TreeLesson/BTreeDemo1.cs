using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CsharpOperation.TreeLesson
{
    class BTreeDemo1
    {
        /*
            B樹

            

            二叉樹問題分析
            操作效率很高，但也存在問題
            以極端情況 (滿二叉樹為例)
            1. 二叉樹需要加載到內存(可能從文檔、資料庫讀資料，再把他轉成二叉樹)，如果節點少不影響
                但如果節點量很大
                (1) 構建二叉樹時，需要多次IO操作，節點海量，構建二叉樹時，速度有影響
                (2) 節點海量，會造成二叉樹高度很大(只有左右兩節點)，影響操作速度


            解決
            => 多叉樹

            多叉樹(mutiway tree)
            
            允許節點可以有更多>=2

            ex: 2-3樹、 3-3-4樹
            通過重新組織節點，減少樹的高度
            

           B樹、B+樹、B*樹

            B樹(Balance Tree)
            1. 一個節點哩，有多個數據項
            2. 文件系統、資料庫系統設計者利用(磁盤預讀原理)，將一個節點大小設為一個頁(通常4k)
            3. 記一下就好:將樹的度M設置為1024，在600憶個元素，最多只要4次IO操作就可以讀取到想要的元素，B、B+樹常用於文件系統、資料庫系統
            
            節點的度: 某個節點的子節點有幾個
            樹的度:所有節點理最大的值，就是樹的度

            概念
            1. b樹的階: 節點最多子節點各數EX: 2-3樹 階為3、2-3-4階為4
            2. 關鍵字分布在整顆樹中，可能在葉子OR 非葉子節點都存放數據(可能在非葉子節點就找到數據)
            3. 從根節點查找，因為符合排序樹，可以知道要往哪個方向的子節點找，值到找到，或是下一個的子節點指針為空了
            1. 性能等價於在做一個二分查找


             2-3樹(b樹的一種)
            最簡單的B樹結構
            1. 所有葉子節點都在同一層(只要B樹都滿足這條件)
            2. 2-3意思是這個樹只有 2節點 or 3節點，每個節點要馬有2個子節點 or 3個子節點 or 沒有子節點，不會有只有1個子節點的情況
         
            構建2-3樹
            也要保持排序樹(保證插入數據的大小順序)
            可以想像成每個數據項中間有間隔
            數據插入規則
            1. 所有葉子節點都要在同一層
            2. 節點度=0、2、3
            3. 當按照上面順序插入，不能滿足上面的要求，就需要拆，先向上拆，上層滿，則拆本層，拆後仍須滿足上面條件
            4. 3節點的子樹值大小仍然遵守BST規則

            B+樹

            (可以想像成鍊表分成很多個部分)


            1. 非葉子節點只放索引(稀疏索引)，不放真實數據
            2. 所有關鍵字都在葉子節點(稠密索引)(葉子節點是個鍊表，鍊表也是有序的)
            3. 不可能在非葉子節點命中關鍵字
            4. 常用於文件搜尋系統
            5. 沒有誰優誰劣

            B*樹
            B+樹的變體
            在B+樹地非根、非葉子節點增加指向兄弟的指針
            * M 為度
            1. 非葉子節點關鍵字個數至少為(2/3)*M，即塊的最低使用率為2/3，而b+樹的塊最低使用率為1/2
            2. b*樹分配新節點的概率比b+樹要低，空間使用率高

            
         */
    }
}
